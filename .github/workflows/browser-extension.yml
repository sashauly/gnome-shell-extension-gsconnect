on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest

    env:
      WEBEXTENSION_DIR: ./webextension

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install GJS (GNOME JavaScript)
        run: sudo apt update && sudo apt install -y gjs

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.WEBEXTENSION_DIR }}

      - name: Run Build Scripts (pack)
        run: npm run pack
        working-directory: ${{ env.WEBEXTENSION_DIR }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Chrome ZIP Asset
        id: upload-chrome-zip-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ env.WEBEXTENSION_DIR }}/gsconnect-chrome.zip
          asset_name: gsconnect-chrome-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

      - name: Upload Firefox ZIP Asset
        id: upload-firefox-zip-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ env.WEBEXTENSION_DIR }}/gsconnect-firefox.zip
          asset_name: gsconnect-firefox-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

      - name: Create CRX file
        uses: cardinalby/webext-buildtools-chrome-crx-action@v2
        with:
          zipFilePath: ${{ steps.upload-chrome-zip-asset.outputs.asset_path }}
          crxFilePath: gsconnect-chrome.crx
          privateKey: ${{ secrets.CRX_PRIVATE_KEY }}

      - name: Upload CRX Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gsconnect-chrome.crx
          asset_name: gsconnect-chrome-${{ github.event.release.tag_name }}.crx
          asset_content_type: application/x-chrome-extension

      # - name: Create XPI file
      #   uses: kewisch/action-web-ext@v1
      #   with:
      #     cmd: build
      #     source: ${ env.WEBEXTENSION_DIR }
      #     artifacts: ./xpi-output

      # - name: Upload XPI Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./xpi-output/*.xpi
      #     asset_name: gsconnect-firefox-${{ github.event.release.tag_name }}.xpi
      #     asset_content_type: application/x-xpinstall
